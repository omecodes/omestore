syntax = "proto3";

option go_package = "github.com/omecodes/store/proto/gen/go;pb";

enum AccessType {
  Default = 0;
  Reference = 1;
}

message File {
  string uuid = 1;
  string name = 2;
  bool  is_dir = 3;
  int64 size = 4;
  int64 create_time = 5;
  int64 edit_time = 6;
  map<string, string> attributes = 7;
}

message EncryptionInfo {
  string key_uri = 1;
  int64 max_block_size = 2;
}

message ActionAuthorization {
  bool restricted = 1;
  string relation = 2;
}

message AccessRelation {
  ActionAuthorization view = 1;
  ActionAuthorization edit = 2;
  ActionAuthorization own = 3;
}

message Access {
  string id = 1;
  string label = 2;
  string description = 3;
  string created_by = 4;
  AccessType type = 5;
  string uri = 6;
  EncryptionInfo encryption = 7;
  AccessRelation operation_relation_override = 8;
  bool restricted = 9;
  bool Folder = 10;
  int64 expire_time = 11;
  string encoded_info = 12;
}


// Access service
service AccessManager {
  rpc CreateAccess(CreateAccessRequest) returns (CreateAccessResponse);
  rpc GetAccess(GetAccessRequest) returns (GetAccessResponse);
  rpc GetAccessList(GetAccessListRequest) returns (stream Access);
  rpc ResolveAccess(ResolveAccessRequest) returns (ResolveAccessResponse);
  rpc DeleteAccess(stream DeleteAccessRequest) returns (DeleteAccessResponse);
}


message CreateAccessRequest {
  Access access = 1;
}
message CreateAccessResponse {}

message GetAccessRequest {
  string id = 1;
}
message GetAccessResponse {
  Access access = 1;
}

message GetAccessListRequest {
  string user = 1;
}

message ResolveAccessRequest {
  Access access = 1;
}
message ResolveAccessResponse {
  Access resolved_access = 2;
}

message DeleteAccessRequest {
  string access_id = 1;
}
message DeleteAccessResponse {}



// Files service
service Files {
  rpc CreateDir(CreateDirRequest) returns (CreateDirResponse);
  rpc ListDir(ListDirRequest) returns (ListDirResponse);
  rpc GetFile(GetFileRequest) returns (GetFileResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  rpc SetFileAttributes(SetFileAttributesRequest) returns (SetFileAttributesResponse);
  rpc GetFileAttributes(GetFileAttributesRequest) returns (GetFileAttributesResponse);
  rpc RenameFile(RenameFileRequest) returns (RenameFileResponse);
  rpc MoveFile(MoveFileRequest) returns (MoveFileResponse);
  rpc CopyFile(CopyFileRequest) returns (CopyFileResponse);
}

message CreateDirRequest {
  string access_id = 1;
  string path = 2;
}
message CreateDirResponse {}

message ListDirRequest {
  string access_id = 1;
  string path = 2;
  uint32 offset = 3;
  uint32 count = 4;
}
message ListDirResponse {
  repeated File files = 1;
  uint32 offset = 2;
  uint32 total = 3;
}

message GetFileRequest {
  string access_id = 1;
  string path = 2;
  bool  with_attributes = 3;
}
message GetFileResponse {
  File file = 1;
}

message DeleteFileRequest {
  string access_id = 1;
  string path = 2;
}
message DeleteFileResponse {}

message SetFileAttributesRequest {
  string access_id = 1;
  string path = 2;
  map<string, string> attributes = 3;
}
message SetFileAttributesResponse {}

message GetFileAttributesRequest {
  string access_id = 1;
  string path = 2;
  repeated string names = 3;
}
message GetFileAttributesResponse {
  map<string, string> attributes = 1;
}

message RenameFileRequest {
  string access_id = 1;
  string path = 2;
  string new_name = 3;
}
message RenameFileResponse {
}

message MoveFileRequest {
  string access_id = 1;
  string path = 2;
  string target_dir = 3;
}
message MoveFileResponse {
  string new_name = 3;
}

message CopyFileRequest {
  string access_id = 1;
  string path = 2;
  string target_dir = 3;
}
message CopyFileResponse {
  string copy_name = 1;
}