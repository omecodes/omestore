syntax = "proto3";

option go_package = "github.com/omecodes/store/pb/pb.proto;pb";

//
enum AllowedTo {
  doNothing = 0;
  create = 1;
  read = 2;
  write = 4;
  delete = 8;
  editAcl = 16;
  graft = 32;
  doAnything = 63;
}

message Collection {
  string id = 1;
  string label = 2;
  string description = 3;
}

message AccessRules {
  string id = 1;
  string label = 2;
  string description = 3;
  repeated string read = 4;
  repeated string write = 5;
  repeated string delete = 6;
}

message PathAccessRules {
  map<string, AccessRules> access_rules = 1;
}

message Header {
  string id = 1;
  string created_by = 2;
  int64 created_at = 3;
  int64 size = 4;
}

message Auth {
  string uid = 1;
  string email = 2;
  bool worker = 3;
  repeated string scope = 4;
  string group = 5;
}

message Object {
  Header header = 1;
  string data = 2;
}

message Patch {
  string object_id = 1;
  string at = 2;
  string data = 3;
}

message ObjectList {
  int64 before = 1;
  int64 after = 2;
  uint32 total = 4;
  repeated Object objects = 5;
}

message Item {
  string name = 1;
  string path = 2;
}

message Index {
  string collection = 1;
  repeated Item fields = 2;
}

service HandlerUnit {
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  rpc GetCollection(GetCollectionRequest) returns (GetCollectionResponse);
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  rpc DeleteCollection(DeleteCollectionRequest) returns (DeleteCollectionResponse);
  rpc PutObject(PutObjectRequest) returns (PutObjectResponse);
  rpc PatchObject(PatchObjectRequest) returns (PatchObjectResponse);
  rpc GetObject(GetObjectRequest) returns (GetObjectResponse);
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse);
  rpc ObjectInfo(ObjectInfoRequest) returns (ObjectInfoResponse);
  rpc ListObjects(ListObjectsRequest) returns (stream Object);
}

message CreateCollectionRequest {
  Collection collection = 1;
}
message CreateCollectionResponse {}

message GetCollectionRequest {
  string id = 1;
}
message GetCollectionResponse {
  Collection collection = 1;
}

message ListCollectionsRequest {}
message ListCollectionsResponse {
  repeated Collection collections = 1;
}

message DeleteCollectionRequest {
  string id = 1;
}
message DeleteCollectionResponse {}

message PutObjectRequest {
  string Collection = 1;
  Object object = 2;
  PathAccessRules access_security_rules = 3;
  repeated Index indexes = 4;
}
message PutObjectResponse {
  string object_id = 1;
}

message PatchObjectRequest{
  string Collection = 1;
  Patch patch = 2;
}
message PatchObjectResponse{}

message GetObjectRequest {
  string Collection = 1;
  string object_id = 2;
  string at = 3;
  bool info_only = 4;
}
message GetObjectResponse {
  Object object = 1;
}

message DeleteObjectRequest {
  string Collection = 1;
  string object_id = 2;
}
message DeleteObjectResponse {}

message ObjectInfoRequest {
  string Collection = 1;
  string object_id = 2;
}
message ObjectInfoResponse {
  Header header = 1;
}

message ListObjectsRequest {
  string collection = 1;
  int64 before = 2;
  int64 after = 3;
  string at = 4;
  string condition = 5;
}
message ListObjectsResponse {
  ObjectList result = 1;
}


service ACL {
  rpc PutRules(PutRulesRequest) returns (PutRulesResponse);
  rpc GetRules(GetRulesRequest) returns (GetRulesResponse);
  rpc GetRulesForPath(GetRulesForPathRequest) returns (GetRulesForPathResponse);
  rpc DeleteRules(DeleteRulesRequest) returns (DeleteRulesResponse);
  rpc DeleteRulesForPath(DeleteRulesForPathRequest) returns (DeleteRulesForPathResponse);
}

message PutRulesRequest {
  string collection = 1;
  string object_id = 2;
  PathAccessRules rules = 3;
}
message PutRulesResponse {}

message GetRulesRequest {
  string collection = 1;
  string object_id = 2;
}
message GetRulesResponse {
  PathAccessRules rules = 1;
}

message GetRulesForPathRequest {
  string collection = 1;
  string object_id = 2;
  repeated string paths = 3;
}
message GetRulesForPathResponse {
  PathAccessRules rules = 1;
}

message DeleteRulesRequest {
  string collection = 1;
  string object_id = 2;
}
message DeleteRulesResponse {}

message DeleteRulesForPathRequest {
  string collection = 1;
  string object_id = 2;
  repeated string paths = 3;
}
message DeleteRulesForPathResponse {}

service SearchEngine {
  rpc CreateEntry(CreateSearchableRequest) returns (CreateSearchableResponse);
  rpc Search(ResearchRequest) returns (stream SearchResult);
}

message Searchable {
  string word = 1;
  map<string, string> info = 2;
}
message SearchResult {}

message CreateSearchableRequest {}
message CreateSearchableResponse {}

message ResearchRequest {
  string pattern = 1;
}
message ResearchResponse {
  repeated string matches = 1;
}