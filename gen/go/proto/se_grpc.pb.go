// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SearchEngineClient is the client API for SearchEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchEngineClient interface {
	Feed(ctx context.Context, opts ...grpc.CallOption) (SearchEngine_FeedClient, error)
	Search(ctx context.Context, in *ResearchRequest, opts ...grpc.CallOption) (SearchEngine_SearchClient, error)
}

type searchEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchEngineClient(cc grpc.ClientConnInterface) SearchEngineClient {
	return &searchEngineClient{cc}
}

func (c *searchEngineClient) Feed(ctx context.Context, opts ...grpc.CallOption) (SearchEngine_FeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SearchEngine_serviceDesc.Streams[0], "/SearchEngine/Feed", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchEngineFeedClient{stream}
	return x, nil
}

type SearchEngine_FeedClient interface {
	Send(*MessageFeed) error
	CloseAndRecv() (*FeedResponse, error)
	grpc.ClientStream
}

type searchEngineFeedClient struct {
	grpc.ClientStream
}

func (x *searchEngineFeedClient) Send(m *MessageFeed) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchEngineFeedClient) CloseAndRecv() (*FeedResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchEngineClient) Search(ctx context.Context, in *ResearchRequest, opts ...grpc.CallOption) (SearchEngine_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SearchEngine_serviceDesc.Streams[1], "/SearchEngine/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchEngineSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchEngine_SearchClient interface {
	Recv() (*SearchResult, error)
	grpc.ClientStream
}

type searchEngineSearchClient struct {
	grpc.ClientStream
}

func (x *searchEngineSearchClient) Recv() (*SearchResult, error) {
	m := new(SearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchEngineServer is the server API for SearchEngine service.
// All implementations must embed UnimplementedSearchEngineServer
// for forward compatibility
type SearchEngineServer interface {
	Feed(SearchEngine_FeedServer) error
	Search(*ResearchRequest, SearchEngine_SearchServer) error
	mustEmbedUnimplementedSearchEngineServer()
}

// UnimplementedSearchEngineServer must be embedded to have forward compatible implementations.
type UnimplementedSearchEngineServer struct {
}

func (UnimplementedSearchEngineServer) Feed(SearchEngine_FeedServer) error {
	return status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedSearchEngineServer) Search(*ResearchRequest, SearchEngine_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchEngineServer) mustEmbedUnimplementedSearchEngineServer() {}

// UnsafeSearchEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchEngineServer will
// result in compilation errors.
type UnsafeSearchEngineServer interface {
	mustEmbedUnimplementedSearchEngineServer()
}

func RegisterSearchEngineServer(s *grpc.Server, srv SearchEngineServer) {
	s.RegisterService(&_SearchEngine_serviceDesc, srv)
}

func _SearchEngine_Feed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchEngineServer).Feed(&searchEngineFeedServer{stream})
}

type SearchEngine_FeedServer interface {
	SendAndClose(*FeedResponse) error
	Recv() (*MessageFeed, error)
	grpc.ServerStream
}

type searchEngineFeedServer struct {
	grpc.ServerStream
}

func (x *searchEngineFeedServer) SendAndClose(m *FeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchEngineFeedServer) Recv() (*MessageFeed, error) {
	m := new(MessageFeed)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SearchEngine_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchEngineServer).Search(m, &searchEngineSearchServer{stream})
}

type SearchEngine_SearchServer interface {
	Send(*SearchResult) error
	grpc.ServerStream
}

type searchEngineSearchServer struct {
	grpc.ServerStream
}

func (x *searchEngineSearchServer) Send(m *SearchResult) error {
	return x.ServerStream.SendMsg(m)
}

var _SearchEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SearchEngine",
	HandlerType: (*SearchEngineServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Feed",
			Handler:       _SearchEngine_Feed_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Search",
			Handler:       _SearchEngine_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/se.proto",
}
