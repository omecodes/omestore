// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SourcesClient is the client API for Sources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcesClient interface {
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceResponse, error)
	GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*GetSourceResponse, error)
	GetSources(ctx context.Context, in *GetSourcesRequest, opts ...grpc.CallOption) (Sources_GetSourcesClient, error)
	ResolveSource(ctx context.Context, in *ResolveSourceRequest, opts ...grpc.CallOption) (*ResolveSourceResponse, error)
	DeleteSource(ctx context.Context, opts ...grpc.CallOption) (Sources_DeleteSourceClient, error)
}

type sourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcesClient(cc grpc.ClientConnInterface) SourcesClient {
	return &sourcesClient{cc}
}

func (c *sourcesClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceResponse, error) {
	out := new(CreateSourceResponse)
	err := c.cc.Invoke(ctx, "/Sources/CreateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesClient) GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*GetSourceResponse, error) {
	out := new(GetSourceResponse)
	err := c.cc.Invoke(ctx, "/Sources/GetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesClient) GetSources(ctx context.Context, in *GetSourcesRequest, opts ...grpc.CallOption) (Sources_GetSourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sources_serviceDesc.Streams[0], "/Sources/GetSources", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourcesGetSourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sources_GetSourcesClient interface {
	Recv() (*Source, error)
	grpc.ClientStream
}

type sourcesGetSourcesClient struct {
	grpc.ClientStream
}

func (x *sourcesGetSourcesClient) Recv() (*Source, error) {
	m := new(Source)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourcesClient) ResolveSource(ctx context.Context, in *ResolveSourceRequest, opts ...grpc.CallOption) (*ResolveSourceResponse, error) {
	out := new(ResolveSourceResponse)
	err := c.cc.Invoke(ctx, "/Sources/ResolveSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesClient) DeleteSource(ctx context.Context, opts ...grpc.CallOption) (Sources_DeleteSourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sources_serviceDesc.Streams[1], "/Sources/DeleteSource", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourcesDeleteSourceClient{stream}
	return x, nil
}

type Sources_DeleteSourceClient interface {
	Send(*DeleteSourceRequest) error
	CloseAndRecv() (*DeleteSourceResponse, error)
	grpc.ClientStream
}

type sourcesDeleteSourceClient struct {
	grpc.ClientStream
}

func (x *sourcesDeleteSourceClient) Send(m *DeleteSourceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sourcesDeleteSourceClient) CloseAndRecv() (*DeleteSourceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteSourceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SourcesServer is the server API for Sources service.
// All implementations must embed UnimplementedSourcesServer
// for forward compatibility
type SourcesServer interface {
	CreateSource(context.Context, *CreateSourceRequest) (*CreateSourceResponse, error)
	GetSource(context.Context, *GetSourceRequest) (*GetSourceResponse, error)
	GetSources(*GetSourcesRequest, Sources_GetSourcesServer) error
	ResolveSource(context.Context, *ResolveSourceRequest) (*ResolveSourceResponse, error)
	DeleteSource(Sources_DeleteSourceServer) error
	mustEmbedUnimplementedSourcesServer()
}

// UnimplementedSourcesServer must be embedded to have forward compatible implementations.
type UnimplementedSourcesServer struct {
}

func (UnimplementedSourcesServer) CreateSource(context.Context, *CreateSourceRequest) (*CreateSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedSourcesServer) GetSource(context.Context, *GetSourceRequest) (*GetSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedSourcesServer) GetSources(*GetSourcesRequest, Sources_GetSourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedSourcesServer) ResolveSource(context.Context, *ResolveSourceRequest) (*ResolveSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveSource not implemented")
}
func (UnimplementedSourcesServer) DeleteSource(Sources_DeleteSourceServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedSourcesServer) mustEmbedUnimplementedSourcesServer() {}

// UnsafeSourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcesServer will
// result in compilation errors.
type UnsafeSourcesServer interface {
	mustEmbedUnimplementedSourcesServer()
}

func RegisterSourcesServer(s *grpc.Server, srv SourcesServer) {
	s.RegisterService(&_Sources_serviceDesc, srv)
}

func _Sources_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sources/CreateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sources_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sources/GetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServer).GetSource(ctx, req.(*GetSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sources_GetSources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourcesServer).GetSources(m, &sourcesGetSourcesServer{stream})
}

type Sources_GetSourcesServer interface {
	Send(*Source) error
	grpc.ServerStream
}

type sourcesGetSourcesServer struct {
	grpc.ServerStream
}

func (x *sourcesGetSourcesServer) Send(m *Source) error {
	return x.ServerStream.SendMsg(m)
}

func _Sources_ResolveSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServer).ResolveSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sources/ResolveSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServer).ResolveSource(ctx, req.(*ResolveSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sources_DeleteSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SourcesServer).DeleteSource(&sourcesDeleteSourceServer{stream})
}

type Sources_DeleteSourceServer interface {
	SendAndClose(*DeleteSourceResponse) error
	Recv() (*DeleteSourceRequest, error)
	grpc.ServerStream
}

type sourcesDeleteSourceServer struct {
	grpc.ServerStream
}

func (x *sourcesDeleteSourceServer) SendAndClose(m *DeleteSourceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sourcesDeleteSourceServer) Recv() (*DeleteSourceRequest, error) {
	m := new(DeleteSourceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sources_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sources",
	HandlerType: (*SourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSource",
			Handler:    _Sources_CreateSource_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _Sources_GetSource_Handler,
		},
		{
			MethodName: "ResolveSource",
			Handler:    _Sources_ResolveSource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSources",
			Handler:       _Sources_GetSources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSource",
			Handler:       _Sources_DeleteSource_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/files.proto",
}

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error)
	ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	SetFileAttributes(ctx context.Context, in *SetFileAttributesRequest, opts ...grpc.CallOption) (*SetFileAttributesResponse, error)
	GetFileAttributes(ctx context.Context, in *GetFileAttributesRequest, opts ...grpc.CallOption) (*GetFileAttributesResponse, error)
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error) {
	out := new(CreateDirResponse)
	err := c.cc.Invoke(ctx, "/Files/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error) {
	out := new(ListDirResponse)
	err := c.cc.Invoke(ctx, "/Files/ListDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/Files/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/Files/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) SetFileAttributes(ctx context.Context, in *SetFileAttributesRequest, opts ...grpc.CallOption) (*SetFileAttributesResponse, error) {
	out := new(SetFileAttributesResponse)
	err := c.cc.Invoke(ctx, "/Files/SetFileAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFileAttributes(ctx context.Context, in *GetFileAttributesRequest, opts ...grpc.CallOption) (*GetFileAttributesResponse, error) {
	out := new(GetFileAttributesResponse)
	err := c.cc.Invoke(ctx, "/Files/GetFileAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	out := new(RenameFileResponse)
	err := c.cc.Invoke(ctx, "/Files/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error) {
	out := new(MoveFileResponse)
	err := c.cc.Invoke(ctx, "/Files/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error) {
	out := new(CopyFileResponse)
	err := c.cc.Invoke(ctx, "/Files/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility
type FilesServer interface {
	CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error)
	ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	SetFileAttributes(context.Context, *SetFileAttributesRequest) (*SetFileAttributesResponse, error)
	GetFileAttributes(context.Context, *GetFileAttributesRequest) (*GetFileAttributesResponse, error)
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error)
	CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error)
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (UnimplementedFilesServer) CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedFilesServer) ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedFilesServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFilesServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFilesServer) SetFileAttributes(context.Context, *SetFileAttributesRequest) (*SetFileAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileAttributes not implemented")
}
func (UnimplementedFilesServer) GetFileAttributes(context.Context, *GetFileAttributesRequest) (*GetFileAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAttributes not implemented")
}
func (UnimplementedFilesServer) RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedFilesServer) MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFilesServer) CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).ListDir(ctx, req.(*ListDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_SetFileAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).SetFileAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/SetFileAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).SetFileAttributes(ctx, req.(*SetFileAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFileAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFileAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/GetFileAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFileAttributes(ctx, req.(*GetFileAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDir",
			Handler:    _Files_CreateDir_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _Files_ListDir_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Files_GetFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Files_DeleteFile_Handler,
		},
		{
			MethodName: "SetFileAttributes",
			Handler:    _Files_SetFileAttributes_Handler,
		},
		{
			MethodName: "GetFileAttributes",
			Handler:    _Files_GetFileAttributes_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _Files_RenameFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _Files_MoveFile_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _Files_CopyFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/files.proto",
}
