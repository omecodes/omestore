// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccessManagerClient is the client API for AccessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessManagerClient interface {
	CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*CreateAccessResponse, error)
	GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponse, error)
	GetAccessList(ctx context.Context, in *GetAccessListRequest, opts ...grpc.CallOption) (AccessManager_GetAccessListClient, error)
	ResolveAccess(ctx context.Context, in *ResolveAccessRequest, opts ...grpc.CallOption) (*ResolveAccessResponse, error)
	DeleteAccess(ctx context.Context, opts ...grpc.CallOption) (AccessManager_DeleteAccessClient, error)
}

type accessManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessManagerClient(cc grpc.ClientConnInterface) AccessManagerClient {
	return &accessManagerClient{cc}
}

func (c *accessManagerClient) CreateAccess(ctx context.Context, in *CreateAccessRequest, opts ...grpc.CallOption) (*CreateAccessResponse, error) {
	out := new(CreateAccessResponse)
	err := c.cc.Invoke(ctx, "/AccessManager/CreateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagerClient) GetAccess(ctx context.Context, in *GetAccessRequest, opts ...grpc.CallOption) (*GetAccessResponse, error) {
	out := new(GetAccessResponse)
	err := c.cc.Invoke(ctx, "/AccessManager/GetAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagerClient) GetAccessList(ctx context.Context, in *GetAccessListRequest, opts ...grpc.CallOption) (AccessManager_GetAccessListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccessManager_serviceDesc.Streams[0], "/AccessManager/GetAccessList", opts...)
	if err != nil {
		return nil, err
	}
	x := &accessManagerGetAccessListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessManager_GetAccessListClient interface {
	Recv() (*FSAccess, error)
	grpc.ClientStream
}

type accessManagerGetAccessListClient struct {
	grpc.ClientStream
}

func (x *accessManagerGetAccessListClient) Recv() (*FSAccess, error) {
	m := new(FSAccess)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessManagerClient) ResolveAccess(ctx context.Context, in *ResolveAccessRequest, opts ...grpc.CallOption) (*ResolveAccessResponse, error) {
	out := new(ResolveAccessResponse)
	err := c.cc.Invoke(ctx, "/AccessManager/ResolveAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManagerClient) DeleteAccess(ctx context.Context, opts ...grpc.CallOption) (AccessManager_DeleteAccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccessManager_serviceDesc.Streams[1], "/AccessManager/DeleteAccess", opts...)
	if err != nil {
		return nil, err
	}
	x := &accessManagerDeleteAccessClient{stream}
	return x, nil
}

type AccessManager_DeleteAccessClient interface {
	Send(*DeleteAccessRequest) error
	CloseAndRecv() (*DeleteAccessResponse, error)
	grpc.ClientStream
}

type accessManagerDeleteAccessClient struct {
	grpc.ClientStream
}

func (x *accessManagerDeleteAccessClient) Send(m *DeleteAccessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accessManagerDeleteAccessClient) CloseAndRecv() (*DeleteAccessResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteAccessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccessManagerServer is the server API for AccessManager service.
// All implementations must embed UnimplementedAccessManagerServer
// for forward compatibility
type AccessManagerServer interface {
	CreateAccess(context.Context, *CreateAccessRequest) (*CreateAccessResponse, error)
	GetAccess(context.Context, *GetAccessRequest) (*GetAccessResponse, error)
	GetAccessList(*GetAccessListRequest, AccessManager_GetAccessListServer) error
	ResolveAccess(context.Context, *ResolveAccessRequest) (*ResolveAccessResponse, error)
	DeleteAccess(AccessManager_DeleteAccessServer) error
	mustEmbedUnimplementedAccessManagerServer()
}

// UnimplementedAccessManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAccessManagerServer struct {
}

func (UnimplementedAccessManagerServer) CreateAccess(context.Context, *CreateAccessRequest) (*CreateAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (UnimplementedAccessManagerServer) GetAccess(context.Context, *GetAccessRequest) (*GetAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (UnimplementedAccessManagerServer) GetAccessList(*GetAccessListRequest, AccessManager_GetAccessListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAccessList not implemented")
}
func (UnimplementedAccessManagerServer) ResolveAccess(context.Context, *ResolveAccessRequest) (*ResolveAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAccess not implemented")
}
func (UnimplementedAccessManagerServer) DeleteAccess(AccessManager_DeleteAccessServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAccess not implemented")
}
func (UnimplementedAccessManagerServer) mustEmbedUnimplementedAccessManagerServer() {}

// UnsafeAccessManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessManagerServer will
// result in compilation errors.
type UnsafeAccessManagerServer interface {
	mustEmbedUnimplementedAccessManagerServer()
}

func RegisterAccessManagerServer(s *grpc.Server, srv AccessManagerServer) {
	s.RegisterService(&_AccessManager_serviceDesc, srv)
}

func _AccessManager_CreateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagerServer).CreateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessManager/CreateAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagerServer).CreateAccess(ctx, req.(*CreateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManager_GetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagerServer).GetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessManager/GetAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagerServer).GetAccess(ctx, req.(*GetAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManager_GetAccessList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAccessListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessManagerServer).GetAccessList(m, &accessManagerGetAccessListServer{stream})
}

type AccessManager_GetAccessListServer interface {
	Send(*FSAccess) error
	grpc.ServerStream
}

type accessManagerGetAccessListServer struct {
	grpc.ServerStream
}

func (x *accessManagerGetAccessListServer) Send(m *FSAccess) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessManager_ResolveAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManagerServer).ResolveAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AccessManager/ResolveAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManagerServer).ResolveAccess(ctx, req.(*ResolveAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManager_DeleteAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccessManagerServer).DeleteAccess(&accessManagerDeleteAccessServer{stream})
}

type AccessManager_DeleteAccessServer interface {
	SendAndClose(*DeleteAccessResponse) error
	Recv() (*DeleteAccessRequest, error)
	grpc.ServerStream
}

type accessManagerDeleteAccessServer struct {
	grpc.ServerStream
}

func (x *accessManagerDeleteAccessServer) SendAndClose(m *DeleteAccessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accessManagerDeleteAccessServer) Recv() (*DeleteAccessRequest, error) {
	m := new(DeleteAccessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AccessManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AccessManager",
	HandlerType: (*AccessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccess",
			Handler:    _AccessManager_CreateAccess_Handler,
		},
		{
			MethodName: "GetAccess",
			Handler:    _AccessManager_GetAccess_Handler,
		},
		{
			MethodName: "ResolveAccess",
			Handler:    _AccessManager_ResolveAccess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAccessList",
			Handler:       _AccessManager_GetAccessList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAccess",
			Handler:       _AccessManager_DeleteAccess_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/files.proto",
}

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error)
	ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	SetFileAttributes(ctx context.Context, in *SetFileAttributesRequest, opts ...grpc.CallOption) (*SetFileAttributesResponse, error)
	GetFileAttributes(ctx context.Context, in *GetFileAttributesRequest, opts ...grpc.CallOption) (*GetFileAttributesResponse, error)
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error) {
	out := new(CreateDirResponse)
	err := c.cc.Invoke(ctx, "/Files/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error) {
	out := new(ListDirResponse)
	err := c.cc.Invoke(ctx, "/Files/ListDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/Files/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/Files/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) SetFileAttributes(ctx context.Context, in *SetFileAttributesRequest, opts ...grpc.CallOption) (*SetFileAttributesResponse, error) {
	out := new(SetFileAttributesResponse)
	err := c.cc.Invoke(ctx, "/Files/SetFileAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetFileAttributes(ctx context.Context, in *GetFileAttributesRequest, opts ...grpc.CallOption) (*GetFileAttributesResponse, error) {
	out := new(GetFileAttributesResponse)
	err := c.cc.Invoke(ctx, "/Files/GetFileAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	out := new(RenameFileResponse)
	err := c.cc.Invoke(ctx, "/Files/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) MoveFile(ctx context.Context, in *MoveFileRequest, opts ...grpc.CallOption) (*MoveFileResponse, error) {
	out := new(MoveFileResponse)
	err := c.cc.Invoke(ctx, "/Files/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (*CopyFileResponse, error) {
	out := new(CopyFileResponse)
	err := c.cc.Invoke(ctx, "/Files/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility
type FilesServer interface {
	CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error)
	ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error)
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	SetFileAttributes(context.Context, *SetFileAttributesRequest) (*SetFileAttributesResponse, error)
	GetFileAttributes(context.Context, *GetFileAttributesRequest) (*GetFileAttributesResponse, error)
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error)
	CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error)
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (UnimplementedFilesServer) CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedFilesServer) ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedFilesServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFilesServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFilesServer) SetFileAttributes(context.Context, *SetFileAttributesRequest) (*SetFileAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileAttributes not implemented")
}
func (UnimplementedFilesServer) GetFileAttributes(context.Context, *GetFileAttributesRequest) (*GetFileAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAttributes not implemented")
}
func (UnimplementedFilesServer) RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedFilesServer) MoveFile(context.Context, *MoveFileRequest) (*MoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFilesServer) CopyFile(context.Context, *CopyFileRequest) (*CopyFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s *grpc.Server, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).ListDir(ctx, req.(*ListDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_SetFileAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).SetFileAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/SetFileAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).SetFileAttributes(ctx, req.(*SetFileAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetFileAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetFileAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/GetFileAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetFileAttributes(ctx, req.(*GetFileAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).MoveFile(ctx, req.(*MoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).CopyFile(ctx, req.(*CopyFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDir",
			Handler:    _Files_CreateDir_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _Files_ListDir_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _Files_GetFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Files_DeleteFile_Handler,
		},
		{
			MethodName: "SetFileAttributes",
			Handler:    _Files_SetFileAttributes_Handler,
		},
		{
			MethodName: "GetFileAttributes",
			Handler:    _Files_GetFileAttributes_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _Files_RenameFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _Files_MoveFile_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _Files_CopyFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/files.proto",
}
