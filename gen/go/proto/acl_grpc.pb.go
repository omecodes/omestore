// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	SaveNamespaceConfig(ctx context.Context, in *SaveNamespaceConfigRequest, opts ...grpc.CallOption) (*SaveNamespaceConfigResponse, error)
	GetNamespaceConfig(ctx context.Context, in *GetNamespaceConfigRequest, opts ...grpc.CallOption) (*GetNamespaceConfigResponse, error)
	DeleteNamespaceConfig(ctx context.Context, in *DeleteNamespaceConfigRequest, opts ...grpc.CallOption) (*DeleteNamespaceConfigResponse, error)
	CheckRequest(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	SaveRelation(ctx context.Context, in *SaveACLRequest, opts ...grpc.CallOption) (*SaveACLResponse, error)
	DeleteRelation(ctx context.Context, in *DeleteACLRequest, opts ...grpc.CallOption) (*DeleteACLResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) SaveNamespaceConfig(ctx context.Context, in *SaveNamespaceConfigRequest, opts ...grpc.CallOption) (*SaveNamespaceConfigResponse, error) {
	out := new(SaveNamespaceConfigResponse)
	err := c.cc.Invoke(ctx, "/Service/SaveNamespaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetNamespaceConfig(ctx context.Context, in *GetNamespaceConfigRequest, opts ...grpc.CallOption) (*GetNamespaceConfigResponse, error) {
	out := new(GetNamespaceConfigResponse)
	err := c.cc.Invoke(ctx, "/Service/GetNamespaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNamespaceConfig(ctx context.Context, in *DeleteNamespaceConfigRequest, opts ...grpc.CallOption) (*DeleteNamespaceConfigResponse, error) {
	out := new(DeleteNamespaceConfigResponse)
	err := c.cc.Invoke(ctx, "/Service/DeleteNamespaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CheckRequest(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/Service/CheckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SaveRelation(ctx context.Context, in *SaveACLRequest, opts ...grpc.CallOption) (*SaveACLResponse, error) {
	out := new(SaveACLResponse)
	err := c.cc.Invoke(ctx, "/Service/SaveRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteRelation(ctx context.Context, in *DeleteACLRequest, opts ...grpc.CallOption) (*DeleteACLResponse, error) {
	out := new(DeleteACLResponse)
	err := c.cc.Invoke(ctx, "/Service/DeleteRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	SaveNamespaceConfig(context.Context, *SaveNamespaceConfigRequest) (*SaveNamespaceConfigResponse, error)
	GetNamespaceConfig(context.Context, *GetNamespaceConfigRequest) (*GetNamespaceConfigResponse, error)
	DeleteNamespaceConfig(context.Context, *DeleteNamespaceConfigRequest) (*DeleteNamespaceConfigResponse, error)
	CheckRequest(context.Context, *CheckRequest) (*CheckResponse, error)
	SaveRelation(context.Context, *SaveACLRequest) (*SaveACLResponse, error)
	DeleteRelation(context.Context, *DeleteACLRequest) (*DeleteACLResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) SaveNamespaceConfig(context.Context, *SaveNamespaceConfigRequest) (*SaveNamespaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNamespaceConfig not implemented")
}
func (UnimplementedServiceServer) GetNamespaceConfig(context.Context, *GetNamespaceConfigRequest) (*GetNamespaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceConfig not implemented")
}
func (UnimplementedServiceServer) DeleteNamespaceConfig(context.Context, *DeleteNamespaceConfigRequest) (*DeleteNamespaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceConfig not implemented")
}
func (UnimplementedServiceServer) CheckRequest(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRequest not implemented")
}
func (UnimplementedServiceServer) SaveRelation(context.Context, *SaveACLRequest) (*SaveACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRelation not implemented")
}
func (UnimplementedServiceServer) DeleteRelation(context.Context, *DeleteACLRequest) (*DeleteACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_SaveNamespaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNamespaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SaveNamespaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/SaveNamespaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SaveNamespaceConfig(ctx, req.(*SaveNamespaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetNamespaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetNamespaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/GetNamespaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetNamespaceConfig(ctx, req.(*GetNamespaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNamespaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNamespaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/DeleteNamespaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNamespaceConfig(ctx, req.(*DeleteNamespaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CheckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CheckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/CheckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CheckRequest(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SaveRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SaveRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/SaveRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SaveRelation(ctx, req.(*SaveACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/DeleteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteRelation(ctx, req.(*DeleteACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveNamespaceConfig",
			Handler:    _Service_SaveNamespaceConfig_Handler,
		},
		{
			MethodName: "GetNamespaceConfig",
			Handler:    _Service_GetNamespaceConfig_Handler,
		},
		{
			MethodName: "DeleteNamespaceConfig",
			Handler:    _Service_DeleteNamespaceConfig_Handler,
		},
		{
			MethodName: "CheckRequest",
			Handler:    _Service_CheckRequest_Handler,
		},
		{
			MethodName: "SaveRelation",
			Handler:    _Service_SaveRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _Service_DeleteRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/acl.proto",
}
