// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ACLClient is the client API for ACL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACLClient interface {
	SaveNamespaceConfig(ctx context.Context, in *SaveNamespaceConfigRequest, opts ...grpc.CallOption) (*SaveNamespaceConfigResponse, error)
	GetNamespaceConfig(ctx context.Context, in *GetNamespaceConfigRequest, opts ...grpc.CallOption) (*GetNamespaceConfigResponse, error)
	DeleteNamespaceConfig(ctx context.Context, in *DeleteNamespaceConfigRequest, opts ...grpc.CallOption) (*DeleteNamespaceConfigResponse, error)
	IsValidRelation(ctx context.Context, in *IsValidRelationRequest, opts ...grpc.CallOption) (*IsValidRelationResponse, error)
	SaveRelation(ctx context.Context, in *SaveRelationRequest, opts ...grpc.CallOption) (*SaveRelationResponse, error)
	DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error)
}

type aCLClient struct {
	cc grpc.ClientConnInterface
}

func NewACLClient(cc grpc.ClientConnInterface) ACLClient {
	return &aCLClient{cc}
}

func (c *aCLClient) SaveNamespaceConfig(ctx context.Context, in *SaveNamespaceConfigRequest, opts ...grpc.CallOption) (*SaveNamespaceConfigResponse, error) {
	out := new(SaveNamespaceConfigResponse)
	err := c.cc.Invoke(ctx, "/ACL/SaveNamespaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLClient) GetNamespaceConfig(ctx context.Context, in *GetNamespaceConfigRequest, opts ...grpc.CallOption) (*GetNamespaceConfigResponse, error) {
	out := new(GetNamespaceConfigResponse)
	err := c.cc.Invoke(ctx, "/ACL/GetNamespaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLClient) DeleteNamespaceConfig(ctx context.Context, in *DeleteNamespaceConfigRequest, opts ...grpc.CallOption) (*DeleteNamespaceConfigResponse, error) {
	out := new(DeleteNamespaceConfigResponse)
	err := c.cc.Invoke(ctx, "/ACL/DeleteNamespaceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLClient) IsValidRelation(ctx context.Context, in *IsValidRelationRequest, opts ...grpc.CallOption) (*IsValidRelationResponse, error) {
	out := new(IsValidRelationResponse)
	err := c.cc.Invoke(ctx, "/ACL/IsValidRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLClient) SaveRelation(ctx context.Context, in *SaveRelationRequest, opts ...grpc.CallOption) (*SaveRelationResponse, error) {
	out := new(SaveRelationResponse)
	err := c.cc.Invoke(ctx, "/ACL/SaveRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLClient) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error) {
	out := new(DeleteRelationResponse)
	err := c.cc.Invoke(ctx, "/ACL/DeleteRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACLServer is the server API for ACL service.
// All implementations must embed UnimplementedACLServer
// for forward compatibility
type ACLServer interface {
	SaveNamespaceConfig(context.Context, *SaveNamespaceConfigRequest) (*SaveNamespaceConfigResponse, error)
	GetNamespaceConfig(context.Context, *GetNamespaceConfigRequest) (*GetNamespaceConfigResponse, error)
	DeleteNamespaceConfig(context.Context, *DeleteNamespaceConfigRequest) (*DeleteNamespaceConfigResponse, error)
	IsValidRelation(context.Context, *IsValidRelationRequest) (*IsValidRelationResponse, error)
	SaveRelation(context.Context, *SaveRelationRequest) (*SaveRelationResponse, error)
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error)
	mustEmbedUnimplementedACLServer()
}

// UnimplementedACLServer must be embedded to have forward compatible implementations.
type UnimplementedACLServer struct {
}

func (UnimplementedACLServer) SaveNamespaceConfig(context.Context, *SaveNamespaceConfigRequest) (*SaveNamespaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNamespaceConfig not implemented")
}
func (UnimplementedACLServer) GetNamespaceConfig(context.Context, *GetNamespaceConfigRequest) (*GetNamespaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceConfig not implemented")
}
func (UnimplementedACLServer) DeleteNamespaceConfig(context.Context, *DeleteNamespaceConfigRequest) (*DeleteNamespaceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceConfig not implemented")
}
func (UnimplementedACLServer) IsValidRelation(context.Context, *IsValidRelationRequest) (*IsValidRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidRelation not implemented")
}
func (UnimplementedACLServer) SaveRelation(context.Context, *SaveRelationRequest) (*SaveRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRelation not implemented")
}
func (UnimplementedACLServer) DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedACLServer) mustEmbedUnimplementedACLServer() {}

// UnsafeACLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACLServer will
// result in compilation errors.
type UnsafeACLServer interface {
	mustEmbedUnimplementedACLServer()
}

func RegisterACLServer(s *grpc.Server, srv ACLServer) {
	s.RegisterService(&_ACL_serviceDesc, srv)
}

func _ACL_SaveNamespaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNamespaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACLServer).SaveNamespaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ACL/SaveNamespaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACLServer).SaveNamespaceConfig(ctx, req.(*SaveNamespaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_GetNamespaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACLServer).GetNamespaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ACL/GetNamespaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACLServer).GetNamespaceConfig(ctx, req.(*GetNamespaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_DeleteNamespaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACLServer).DeleteNamespaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ACL/DeleteNamespaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACLServer).DeleteNamespaceConfig(ctx, req.(*DeleteNamespaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_IsValidRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACLServer).IsValidRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ACL/IsValidRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACLServer).IsValidRelation(ctx, req.(*IsValidRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_SaveRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACLServer).SaveRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ACL/SaveRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACLServer).SaveRelation(ctx, req.(*SaveRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACL_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACLServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ACL/DeleteRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACLServer).DeleteRelation(ctx, req.(*DeleteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ACL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ACL",
	HandlerType: (*ACLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveNamespaceConfig",
			Handler:    _ACL_SaveNamespaceConfig_Handler,
		},
		{
			MethodName: "GetNamespaceConfig",
			Handler:    _ACL_GetNamespaceConfig_Handler,
		},
		{
			MethodName: "DeleteNamespaceConfig",
			Handler:    _ACL_DeleteNamespaceConfig_Handler,
		},
		{
			MethodName: "IsValidRelation",
			Handler:    _ACL_IsValidRelation_Handler,
		},
		{
			MethodName: "SaveRelation",
			Handler:    _ACL_SaveRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _ACL_DeleteRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/acl.proto",
}
