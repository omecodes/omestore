// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/omecodes/omestore/ent/permission"
	"github.com/omecodes/omestore/ent/predicate"
	"github.com/omecodes/omestore/ent/user"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks      []Hook
	mutation   *PermissionMutation
	predicates []predicate.Permission
}

// Where adds a new predicate for the builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetUser sets the user field.
func (pu *PermissionUpdate) SetUser(s string) *PermissionUpdate {
	pu.mutation.SetUser(s)
	return pu
}

// SetData sets the data field.
func (pu *PermissionUpdate) SetData(s string) *PermissionUpdate {
	pu.mutation.SetData(s)
	return pu
}

// SetActionRead sets the action_read field.
func (pu *PermissionUpdate) SetActionRead(b bool) *PermissionUpdate {
	pu.mutation.SetActionRead(b)
	return pu
}

// SetActionWrite sets the action_write field.
func (pu *PermissionUpdate) SetActionWrite(b bool) *PermissionUpdate {
	pu.mutation.SetActionWrite(b)
	return pu
}

// SetSubjectID sets the subject edge to User by id.
func (pu *PermissionUpdate) SetSubjectID(id string) *PermissionUpdate {
	pu.mutation.SetSubjectID(id)
	return pu
}

// SetNillableSubjectID sets the subject edge to User by id if the given value is not nil.
func (pu *PermissionUpdate) SetNillableSubjectID(id *string) *PermissionUpdate {
	if id != nil {
		pu = pu.SetSubjectID(*id)
	}
	return pu
}

// SetSubject sets the subject edge to User.
func (pu *PermissionUpdate) SetSubject(u *User) *PermissionUpdate {
	return pu.SetSubjectID(u.ID)
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// ClearSubject clears the subject edge to User.
func (pu *PermissionUpdate) ClearSubject() *PermissionUpdate {
	pu.mutation.ClearSubject()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.User(); ok {
		if err := permission.UserValidator(v); err != nil {
			return 0, &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Data(); ok {
		if err := permission.DataValidator(v); err != nil {
			return 0, &ValidationError{Name: "data", err: fmt.Errorf("ent: validator failed for field \"data\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: permission.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permission.FieldUser,
		})
	}
	if value, ok := pu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permission.FieldData,
		})
	}
	if value, ok := pu.mutation.ActionRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permission.FieldActionRead,
		})
	}
	if value, ok := pu.mutation.ActionWrite(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permission.FieldActionWrite,
		})
	}
	if pu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.SubjectTable,
			Columns: []string{permission.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.SubjectTable,
			Columns: []string{permission.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	hooks    []Hook
	mutation *PermissionMutation
}

// SetUser sets the user field.
func (puo *PermissionUpdateOne) SetUser(s string) *PermissionUpdateOne {
	puo.mutation.SetUser(s)
	return puo
}

// SetData sets the data field.
func (puo *PermissionUpdateOne) SetData(s string) *PermissionUpdateOne {
	puo.mutation.SetData(s)
	return puo
}

// SetActionRead sets the action_read field.
func (puo *PermissionUpdateOne) SetActionRead(b bool) *PermissionUpdateOne {
	puo.mutation.SetActionRead(b)
	return puo
}

// SetActionWrite sets the action_write field.
func (puo *PermissionUpdateOne) SetActionWrite(b bool) *PermissionUpdateOne {
	puo.mutation.SetActionWrite(b)
	return puo
}

// SetSubjectID sets the subject edge to User by id.
func (puo *PermissionUpdateOne) SetSubjectID(id string) *PermissionUpdateOne {
	puo.mutation.SetSubjectID(id)
	return puo
}

// SetNillableSubjectID sets the subject edge to User by id if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableSubjectID(id *string) *PermissionUpdateOne {
	if id != nil {
		puo = puo.SetSubjectID(*id)
	}
	return puo
}

// SetSubject sets the subject edge to User.
func (puo *PermissionUpdateOne) SetSubject(u *User) *PermissionUpdateOne {
	return puo.SetSubjectID(u.ID)
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// ClearSubject clears the subject edge to User.
func (puo *PermissionUpdateOne) ClearSubject() *PermissionUpdateOne {
	puo.mutation.ClearSubject()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	if v, ok := puo.mutation.User(); ok {
		if err := permission.UserValidator(v); err != nil {
			return nil, &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Data(); ok {
		if err := permission.DataValidator(v); err != nil {
			return nil, &ValidationError{Name: "data", err: fmt.Errorf("ent: validator failed for field \"data\": %w", err)}
		}
	}

	var (
		err  error
		node *Permission
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	pe, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pe
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (pe *Permission, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: permission.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Permission.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permission.FieldUser,
		})
	}
	if value, ok := puo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permission.FieldData,
		})
	}
	if value, ok := puo.mutation.ActionRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permission.FieldActionRead,
		})
	}
	if value, ok := puo.mutation.ActionWrite(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permission.FieldActionWrite,
		})
	}
	if puo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.SubjectTable,
			Columns: []string{permission.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.SubjectTable,
			Columns: []string{permission.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pe = &Permission{config: puo.config}
	_spec.Assign = pe.assignValues
	_spec.ScanValues = pe.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pe, nil
}
