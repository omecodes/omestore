// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/omecodes/omestore/ent/permission"
	"github.com/omecodes/omestore/ent/user"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// ActionRead holds the value of the "action_read" field.
	ActionRead bool `json:"action_read,omitempty"`
	// ActionWrite holds the value of the "action_write" field.
	ActionWrite bool `json:"action_write,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges            PermissionEdges `json:"edges"`
	user_permissions *string
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// Subject holds the value of the subject edge.
	Subject *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) SubjectOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Subject == nil {
			// The edge subject was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Subject, nil
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // user
		&sql.NullString{}, // data
		&sql.NullBool{},   // action_read
		&sql.NullBool{},   // action_write
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Permission) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // user_permissions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(values ...interface{}) error {
	if m, n := len(values), len(permission.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		pe.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field user", values[0])
	} else if value.Valid {
		pe.User = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field data", values[1])
	} else if value.Valid {
		pe.Data = value.String
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field action_read", values[2])
	} else if value.Valid {
		pe.ActionRead = value.Bool
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field action_write", values[3])
	} else if value.Valid {
		pe.ActionWrite = value.Bool
	}
	values = values[4:]
	if len(values) == len(permission.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field user_permissions", values[0])
		} else if value.Valid {
			pe.user_permissions = new(string)
			*pe.user_permissions = value.String
		}
	}
	return nil
}

// QuerySubject queries the subject edge of the Permission.
func (pe *Permission) QuerySubject() *UserQuery {
	return (&PermissionClient{config: pe.config}).QuerySubject(pe)
}

// Update returns a builder for updating this Permission.
// Note that, you need to call Permission.Unwrap() before calling this method, if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return (&PermissionClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", user=")
	builder.WriteString(pe.User)
	builder.WriteString(", data=")
	builder.WriteString(pe.Data)
	builder.WriteString(", action_read=")
	builder.WriteString(fmt.Sprintf("%v", pe.ActionRead))
	builder.WriteString(", action_write=")
	builder.WriteString(fmt.Sprintf("%v", pe.ActionWrite))
	builder.WriteByte(')')
	return builder.String()
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission

func (pe Permissions) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
