// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// AccessesColumns holds the columns for the "accesses" table.
	AccessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "creator", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "user_accesses", Type: field.TypeString, Nullable: true},
	}
	// AccessesTable holds the schema information for the "accesses" table.
	AccessesTable = &schema.Table{
		Name:       "accesses",
		Columns:    AccessesColumns,
		PrimaryKey: []*schema.Column{AccessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "accesses_users_accesses",
				Columns: []*schema.Column{AccessesColumns[3]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "create_at", Type: field.TypeInt64},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:        "groups",
		Columns:     GroupsColumns,
		PrimaryKey:  []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user", Type: field.TypeString},
		{Name: "data", Type: field.TypeString},
		{Name: "action_read", Type: field.TypeBool},
		{Name: "action_write", Type: field.TypeBool},
		{Name: "user_permissions", Type: field.TypeString, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "permissions_users_permissions",
				Columns: []*schema.Column{PermissionsColumns[5]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "permission_user_data",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[1], PermissionsColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "validated", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "group_users", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "users_groups_users",
				Columns: []*schema.Column{UsersColumns[5]},

				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessesTable,
		GroupsTable,
		PermissionsTable,
		UsersTable,
	}
)

func init() {
	AccessesTable.ForeignKeys[0].RefTable = UsersTable
	PermissionsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = GroupsTable
}
