// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"github.com/omecodes/omestore/ent/permission"
	"github.com/omecodes/omestore/ent/user"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
}

// SetUser sets the user field.
func (pc *PermissionCreate) SetUser(s string) *PermissionCreate {
	pc.mutation.SetUser(s)
	return pc
}

// SetData sets the data field.
func (pc *PermissionCreate) SetData(s string) *PermissionCreate {
	pc.mutation.SetData(s)
	return pc
}

// SetActionRead sets the action_read field.
func (pc *PermissionCreate) SetActionRead(b bool) *PermissionCreate {
	pc.mutation.SetActionRead(b)
	return pc
}

// SetActionWrite sets the action_write field.
func (pc *PermissionCreate) SetActionWrite(b bool) *PermissionCreate {
	pc.mutation.SetActionWrite(b)
	return pc
}

// SetID sets the id field.
func (pc *PermissionCreate) SetID(u uuid.UUID) *PermissionCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetSubjectID sets the subject edge to User by id.
func (pc *PermissionCreate) SetSubjectID(id string) *PermissionCreate {
	pc.mutation.SetSubjectID(id)
	return pc
}

// SetNillableSubjectID sets the subject edge to User by id if the given value is not nil.
func (pc *PermissionCreate) SetNillableSubjectID(id *string) *PermissionCreate {
	if id != nil {
		pc = pc.SetSubjectID(*id)
	}
	return pc
}

// SetSubject sets the subject edge to User.
func (pc *PermissionCreate) SetSubject(u *User) *PermissionCreate {
	return pc.SetSubjectID(u.ID)
}

// Mutation returns the PermissionMutation object of the builder.
func (pc *PermissionCreate) Mutation() *PermissionMutation {
	return pc.mutation
}

// Save creates the Permission in the database.
func (pc *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	if err := pc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Permission
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PermissionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PermissionCreate) preSave() error {
	if _, ok := pc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required field \"user\"")}
	}
	if v, ok := pc.mutation.User(); ok {
		if err := permission.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New("ent: missing required field \"data\"")}
	}
	if v, ok := pc.mutation.Data(); ok {
		if err := permission.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf("ent: validator failed for field \"data\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ActionRead(); !ok {
		return &ValidationError{Name: "action_read", err: errors.New("ent: missing required field \"action_read\"")}
	}
	if _, ok := pc.mutation.ActionWrite(); !ok {
		return &ValidationError{Name: "action_write", err: errors.New("ent: missing required field \"action_write\"")}
	}
	return nil
}

func (pc *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	pe, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pe, nil
}

func (pc *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		pe    = &Permission{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: permission.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: permission.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		pe.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.User(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permission.FieldUser,
		})
		pe.User = value
	}
	if value, ok := pc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: permission.FieldData,
		})
		pe.Data = value
	}
	if value, ok := pc.mutation.ActionRead(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permission.FieldActionRead,
		})
		pe.ActionRead = value
	}
	if value, ok := pc.mutation.ActionWrite(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: permission.FieldActionWrite,
		})
		pe.ActionWrite = value
	}
	if nodes := pc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   permission.SubjectTable,
			Columns: []string{permission.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pe, _spec
}

// PermissionCreateBulk is the builder for creating a bulk of Permission entities.
type PermissionCreateBulk struct {
	config
	builders []*PermissionCreate
}

// Save creates the Permission entities in the database.
func (pcb *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Permission, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (pcb *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
