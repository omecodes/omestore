// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldValidated holds the string denoting the validated field in the database.
	FieldValidated = "validated"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"

	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeAccesses holds the string denoting the accesses edge name in mutations.
	EdgeAccesses = "accesses"
	// EdgePermissions holds the string denoting the permissions edge name in mutations.
	EdgePermissions = "permissions"

	// Table holds the table name of the user in the database.
	Table = "users"
	// GroupTable is the table the holds the group relation/edge.
	GroupTable = "users"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "group_users"
	// AccessesTable is the table the holds the accesses relation/edge.
	AccessesTable = "accesses"
	// AccessesInverseTable is the table name for the Access entity.
	// It exists in this package in order to avoid circular dependency with the "access" package.
	AccessesInverseTable = "accesses"
	// AccessesColumn is the table column denoting the accesses relation/edge.
	AccessesColumn = "user_accesses"
	// PermissionsTable is the table the holds the permissions relation/edge.
	PermissionsTable = "permissions"
	// PermissionsInverseTable is the table name for the Permission entity.
	// It exists in this package in order to avoid circular dependency with the "permission" package.
	PermissionsInverseTable = "permissions"
	// PermissionsColumn is the table column denoting the permissions relation/edge.
	PermissionsColumn = "user_permissions"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPassword,
	FieldEmail,
	FieldValidated,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"group_users",
}

var (
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultValidated holds the default value on creation for the validated field.
	DefaultValidated bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
