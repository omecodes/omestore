// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/omecodes/omestore/ent/access"
	"github.com/omecodes/omestore/ent/user"
)

// Access is the model entity for the Access schema.
type Access struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessQuery when eager-loading is set.
	Edges         AccessEdges `json:"edges"`
	user_accesses *string
}

// AccessEdges holds the relations/edges for other nodes in the graph.
type AccessEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccessEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Access) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullString{}, // creator
		&sql.NullInt64{},  // created_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Access) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // user_accesses
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Access fields.
func (a *Access) assignValues(values ...interface{}) error {
	if m, n := len(values), len(access.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		a.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field creator", values[0])
	} else if value.Valid {
		a.Creator = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[1])
	} else if value.Valid {
		a.CreatedAt = value.Int64
	}
	values = values[2:]
	if len(values) == len(access.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field user_accesses", values[0])
		} else if value.Valid {
			a.user_accesses = new(string)
			*a.user_accesses = value.String
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Access.
func (a *Access) QueryOwner() *UserQuery {
	return (&AccessClient{config: a.config}).QueryOwner(a)
}

// Update returns a builder for updating this Access.
// Note that, you need to call Access.Unwrap() before calling this method, if this Access
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Access) Update() *AccessUpdateOne {
	return (&AccessClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Access) Unwrap() *Access {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Access is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Access) String() string {
	var builder strings.Builder
	builder.WriteString("Access(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", creator=")
	builder.WriteString(a.Creator)
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", a.CreatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Accesses is a parsable slice of Access.
type Accesses []*Access

func (a Accesses) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
